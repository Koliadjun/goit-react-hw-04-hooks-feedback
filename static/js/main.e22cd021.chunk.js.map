{"version":3,"sources":["components/StatisticsComp/Statistics/Statistics.module.css","components/StatisticsComp/Statistics/Statistics.jsx","components/StatisticsComp/FeedbackOptions/FeedbackOptions.jsx","components/StatisticsComp/Section/Section.jsx","components/StatisticsComp/Notification/Notification.jsx","components/StatisticsComp/StatisticsCopm.jsx","App.js","reportWebVitals.js","index.js","components/StatisticsComp/FeedbackOptions/feedbackOptions.module.css","components/StatisticsComp/Section/section.module.css"],"names":["module","exports","Statistics","options","total","positivePercentage","ops","Object","keys","className","s","list","map","item","shortid","generate","FeedbackOptions","onLeaveFeedback","color","button","onClick","style","backgroundColor","name","Section","title","children","section","Notification","message","StatisticsComp","useState","good","setGood","neutral","setNeutral","bad","setBad","countTotalFeedback","totalFeedback","totalFeedbackPrs","Math","round","e","target","prevS","Error","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e22cd021.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"Statistics_list__ad-_h\",\"item\":\"Statistics_item__k3sRK\"};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport shortid from 'shortid';\n\nimport s from './Statistics.module.css';\nfunction Statistics({ options, total, positivePercentage }) {\n  const ops = Object.keys(options);\n  return (\n    <ul className={s.list}>\n      {ops.map(item => (\n        <li className={s.item} key={shortid.generate()}>\n          {item}:<span> {options[item]}</span>\n        </li>\n      ))}\n      {total ? (\n        <li className={s.item}>\n          total: <span>{total}</span>\n        </li>\n      ) : null}\n      {positivePercentage ? (\n        <li className={s.item}>\n          positive feedback: <span>{positivePercentage}%</span>\n        </li>\n      ) : null}\n    </ul>\n  );\n}\n\nStatistics.propTypes = {\n  options: PropTypes.shape({}).isRequired,\n  total: PropTypes.number.isRequired,\n  positivePercentage: PropTypes.number.isRequired,\n};\n\nexport default Statistics;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport shortid from 'shortid';\nimport s from './feedbackOptions.module.css';\n\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => {\n  return (\n    <ul className={s.list}>\n      {options.map(item => {\n        let color;\n        switch (item) {\n          case 'good':\n            color = '#00ff00';\n            break;\n          case 'neutral':\n            color = '#ff8e00';\n            break;\n          case 'bad':\n            color = '#ff0000';\n            break;\n          default:\n            color = 'grey';\n            break;\n        }\n        return (\n          <li className={s.item} key={shortid.generate()}>\n            <button\n              className={s.button}\n              onClick={onLeaveFeedback}\n              style={{ backgroundColor: ` ${color}` }}\n              name={item}\n            >\n              {item}\n            </button>\n          </li>\n        );\n      })}\n    </ul>\n  );\n};\n\nFeedbackOptions.propTypes = {\n  options: PropTypes.array.isRequired,\n  onLeaveFeedback: PropTypes.func.isRequired,\n};\n\nexport default FeedbackOptions;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport s from './section.module.css';\n\nconst Section = ({ title, children }) => {\n  return (\n    <section className={s.section}>\n      <h2>{title}</h2>\n      {children}\n    </section>\n  );\n};\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n  children: PropTypes.element.isRequired,\n};\nexport default Section;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Notification = ({ message }) => {\n  return <h3>{message}</h3>;\n};\nNotification.propTypes = {\n  message: PropTypes.string.isRequired,\n};\nexport default Notification;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport Statistics from './Statistics/Statistics';\nimport FeedbackOptions from './FeedbackOptions/FeedbackOptions';\nimport Section from './Section/Section';\nimport Notification from './Notification/Notification';\nfunction StatisticsComp() {\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n\n  const clickHandler = e => {\n    switch (e.target.name) {\n      case 'good': {\n        setGood(prevS => prevS + 1);\n        break;\n      }\n      case 'neutral': {\n        setNeutral(prevS => prevS + 1);\n        break;\n      }\n      case 'bad': {\n        setBad(prevS => prevS + 1);\n        break;\n      }\n      default:\n        throw new Error('No such element');\n    }\n  };\n\n  const countTotalFeedback = () => good + neutral + bad;\n\n  const countPositiveFeedbackPercentage = () =>\n    Math.round((good / countTotalFeedback()) * 100);\n\n  const totalFeedback = countTotalFeedback();\n  const totalFeedbackPrs = countPositiveFeedbackPercentage();\n  return (\n    <>\n      <Section title={'Please live a comment'}>\n        <FeedbackOptions\n          options={['good', 'neutral', 'bad']}\n          onLeaveFeedback={clickHandler}\n        />\n      </Section>\n      <Section title=\"Statistics\">\n        {totalFeedback ? (\n          <Statistics\n            options={{ good, neutral, bad }}\n            total={totalFeedback}\n            positivePercentage={totalFeedbackPrs}\n          />\n        ) : (\n          <Notification message=\"No feedback given\" />\n        )}\n      </Section>\n    </>\n  );\n}\n\nStatisticsComp.propTypes = {\n  stats: PropTypes.shape({\n    good: PropTypes.number.isRequired,\n    neutral: PropTypes.number.isRequired,\n    bad: PropTypes.number.isRequired,\n  }),\n};\nexport default StatisticsComp;\n","import './App.css';\nimport React from 'react'\nimport StatisticsComp from './components/StatisticsComp';\nconst App = () => {\n  return (\n    <StatisticsComp />\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'modern-normalize/modern-normalize.css';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"feedbackOptions_list__1_G8V\",\"item\":\"feedbackOptions_item__4poVa\",\"button\":\"feedbackOptions_button__3oJf2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"section\":\"section_section__37JcP\"};"],"sourceRoot":""}